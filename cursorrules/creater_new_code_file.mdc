---
description: 
globs: 
alwaysApply: true
---
# iOS 代码迁移多样性与安全性规则

## 前置步骤 - MCP工具配合使用

### 1. 项目初始化
在开始改造前，请先使用MCP工具进行项目准备：
```
1. ios_scan_project(project_path) - 扫描项目结构，生成文件清单
2. ios_setup_cursor_rules(project_path, cursor_project_root) - 注入规则文件
3. ios_analyze_file(file_path, content) - 分析目标文件基本信息
4. ios_generate_cursor_instructions(file_path) - 获取改造指令
```

### 2. 改造过程中
在改造完成后，及时更新进度：
```
ios_update_progress(project_path, completed_files, notes) - 更新改造进度
ios_get_progress_statistics(project_path) - 查看整体统计
```

## 核心改造规则

### 处理步骤

#### 1. 生成新代码类（含随机新功能）
基于主题和 @iOS_Code_Rules.mdc 的业务语义，生成若干新的类、子类或扩展（extension/category）：

**功能要求：**
- 每个新类/扩展需结合一个随机但与主题相关的新功能
- 可以是任意功能（**严禁**：支付、Web、JavaScript、匹配、约会、1v1等敏感功能）
- 新类/扩展的命名、属性、方法、注释等需与原有代码风格、业务语义保持一致
- 每个生成类的代码形态和内容必须独立
- 新的代码必须放在指定文件所在的目录中

#### 2. 新代码调用集成
在当前目标类中的对应函数中加入新代码的调用：

**调用要求：**
- 保证新代码100%被原有代码调用到
- 不会影响原有逻辑
- 尽量分散，不要一个函数连续插入多个调用
- 保证目标类的每个类都有调用新代码
- 每个类的70%以上的函数都调用到新的代码

#### 3. 代码占比检测
完成改造后输出格式：
```
生成代码占比 xx%
原有代码行数: xxx
新增代码行数: xxx
总代码行数: xxx
调用覆盖率: xx%
```

#### 4. 代码规范检测
结合 @iOS_Code_Rules.mdc 中设置的规范检查当前生成的代码是否合规

## 详细技术要求

### 多样性要求
- 每个类、结构体、扩展、类目等生成的内容必须唯一
- 禁止重复模板或雷同实现
- 使用不同的设计模式和实现方式

### 必需成员类型
每个类/结构体/扩展/类目必须包含以下成员类型（可组合）：
- **保护属性**：private/protected
- **变量**：var/let
- **常量**：let/static let
- **类方法**：static/class func
- **实例方法**：func

### 强制技术栈要求
每个类/结构体/扩展/类目中，必须包含：

#### GCD使用（必需）
至少包含一次 Grand Central Dispatch 相关的代码：
```swift
private let processingQueue = DispatchQueue(label: "processing", qos: .utility)
```

#### UIKit使用（必需）
至少包含一次 UIKit 相关的代码：
```swift
private func updateUI() {
    let view = UIView()
    view.backgroundColor = UIColor.systemBlue
}
```

#### 系统函数调用（必需）
至少包含一次系统函数调用：
```swift
let timestamp = Date().timeIntervalSince1970
let uuid = UUID().uuidString
NotificationCenter.default.post(name: .customNotification, object: nil)
```

#### 闭包/回调（必需）
至少包含一个闭包属性或方法参数，并有实际调用：
```swift
func processData(completion: @escaping (Bool) -> Void) {
    // 实际处理
    completion(true)
}
```

### 代码质量要求

#### 调用链完整性
- 所有生成的属性、方法、闭包等，必须在类/结构体/扩展/类目内部有实际调用
- 禁止未被调用的空属性、空方法

#### 功能实现完整性
- 禁止生成无实际功能的空实现
- 所有成员必须有实际逻辑（如赋值、计算、调用系统API等）

#### 扩展/类目要求
- 如原有类有扩展（extension）或类目（category），迁移时也需为新类生成至少一个扩展/类目
- 内容不重复，并有实际调用

#### Getter/Setter要求
- 如有属性，需实现至少一个自定义 getter 或 setter

## 安全性约束

### 严禁内容
- **敏感信息**：禁止迁移或生成任何包含敏感信息、隐私数据、第三方未授权代码
- **外部依赖**：禁止自动生成依赖外部库或服务的代码，除非目标项目已明确集成
- **死代码**：禁止生成未被调用、未被引用的死代码

### 禁止敏感词
严禁在代码中使用以下敏感词：
- Review, WebView, js, Pay, In-app, purchase
- payment, billing, transaction, checkout
- dating, match, chat, message, social

## MCP工具集成工作流

### 标准改造流程
```
步骤1: ios_scan_project() -> 获取项目结构
步骤2: ios_analyze_file() -> 分析目标文件
步骤3: ios_generate_cursor_instructions() -> 获取改造指令
步骤4: 执行代码改造（遵循本规则）
步骤5: ios_update_progress() -> 更新进度记录
步骤6: ios_get_progress_statistics() -> 验证完成情况
```

### 改造完成检查清单
- [ ] 新增代码占比符合要求
- [ ] 100%新代码被调用
- [ ] 70%原有方法调用新代码
- [ ] 包含所有必需技术栈
- [ ] 无敏感功能实现
- [ ] 代码风格保持一致
- [ ] 通过MCP工具验证

## 使用说明

在Cursor中使用本规则时：
1. 先引用 `@iOS_Code_Rules.mdc` 获取项目特定规则
2. 结合本文件的技术要求进行改造
3. 使用MCP工具进行进度跟踪和质量验证
4. 确保改造结果符合所有安全性和质量要求 