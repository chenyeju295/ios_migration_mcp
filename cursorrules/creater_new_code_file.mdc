---
description: 
globs: 
alwaysApply: true
---
代码迁移多样性与安全性规则（Rule）
处理步骤
1. 生成新代码类（含随机新功能）
，基于主题: ***,  [iOS_Code_Rules.mdc](mdc:.cursor/rules/iOS_Code_Rules.mdc)的业务语义，生成若干新的类、子类或扩展（extension/category）。
每个新类/扩展需结合一个随机但与主题务相关的新功能可以是任意功能(排除 支付，Web,Js，匹配，约会，1v1 等敏感功能)。
新类/扩展的命名、属性、方法、注释等需与原有代码风格、业务语义保持一致。每个生成类的代码形态和内容必须独立。
新的代码必须是放在 指定的文件所在的目录中。
2. 新代码调用
在当前目标的类中对应的函数中加入新代码的调用。需要保证新代码100%被原有代码调用到，并且不会影响原有逻辑。并且保证尽量的分散，不要一个函数连续插入多个调用。并且保证目标类的每个类都有调用新代码，并且每个类的70%以上的函数都调用到新的代码。
3. 检测旧代码和新增代码的占比
输出格式为 生成代码占比 xx% 
4. 检测代码规范
结合 [iOS_Code_Rules.mdc](mdc:.cursor/rules/iOS_Code_Rules.mdc) 中设置的规范检查当前生成的代码是否合规
其他规则：
多样性要求：每个类、结构体、扩展、类目等生成的内容必须唯一，禁止重复模板或雷同实现。
成员类型：每个类/结构体/扩展/类目必须包含以下成员类型（可组合）：
        保护属性（private/protected）
        变量（var/let）
        常量（let/static let）
        类方法（static/class func）
        实例方法（func）
调用链：所有生成的属性、方法、闭包等，必须在类/结构体/扩展/类目内部有实际调用，禁止未被调用的空属性、空方法。
功能实现：禁止生成无实际功能的空实现，所有成员必须有实际逻辑（如赋值、计算、调用系统API等）。
GCD使用：每个类/结构体/扩展/类目中，至少包含一次 Grand Central Dispatch（GCD）相关的代码（如 DispatchQueue）。
UIKit使用：每个类/结构体/扩展/类目中，至少包含一次 UIKit 相关的代码（如 UIView、UIColor、UILabel 等）。
系统函数：每个类/结构体/扩展/类目中，至少包含一次系统函数调用（如 print、Date、UUID、NotificationCenter 等）。
闭包/回调：每个类/结构体/扩展/类目中，至少包含一个闭包属性或方法参数，并有实际调用。
扩展/类目：如原有类有扩展（extension）或类目（category），迁移时也需为新类生成至少一个扩展/类目，且内容不重复，并有实际调用。
Getter/Setter：如有属性，需实现至少一个自定义 getter 或 setter。
无敏感信息：禁止迁移或生成任何包含敏感信息、隐私数据、第三方未授权代码。
无外部依赖：禁止自动生成依赖外部库或服务的代码，除非目标项目已明确集成。
无死代码：禁止生成未被调用、未被引用的死代码。
禁止敏感词：Review, WebView, js ,Pay,In-app,purchase 