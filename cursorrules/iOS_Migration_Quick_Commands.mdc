---
description: 
globs: 
alwaysApply: false
---
# iOS Migration Quick Commands for Cursor IDE

## MCP工具调用命令

### 项目初始化
当用户说"开始iOS项目改造"或"初始化项目"时，执行：
1. ios_scan_project(project_path="用户项目路径")
2. ios_setup_cursor_rules(project_path="用户项目路径", cursor_project_root="当前工作目录")
3. 分析扫描结果并提供改造建议

### 文件改造
当用户说"改造文件"或提到具体Swift文件时：
1. ios_analyze_file(file_path="目标文件", file_content="文件内容")
2. ios_generate_cursor_instructions(file_path="目标文件")
3. 根据文件大小使用对应的改造策略
4. 执行代码改造

### 进度管理
当用户说"更新进度"或"查看进度"时：
1. ios_update_progress(project_path="项目路径", completed_files=["完成的文件列表"])
2. ios_get_progress_statistics(project_path="项目路径")
3. 提供下一步建议

## 改造策略

### 文件大小分类策略
- 小文件（<50行）：生成1个辅助类，占比40%-60%
- 中等文件（50-200行）：生成2个辅助类，占比35%-45%  
- 大文件（200+行）：生成2-3个辅助类，占比30%-40%


### 代码调用要求
- 100%新代码被原有代码调用
- 调用分散在不同方法中
- 不影响原有功能逻辑

## 安全合规检查

### 敏感词检测
严禁包含以下关键词：
- payment, billing
- javascript, js, web
- dating, match, sex
- in-app, pay, review

### 改造后验证
每次改造完成后检查：
1. 代码占比是否在规定范围内
2. 所有新代码是否被调用
3. 是否有敏感功能实现 

## 快速命令参考

### 开始新项目
```
用户说："开始iOS项目改造" 
→ 执行项目扫描和规则注入
```

### 改造单个文件
```
用户说："改造AppDelegate.swift"
→ 分析文件并执行对应策略改造
```

### 批量改造
```
用户说："改造所有安全文件"
→ 按优先级逐个改造文件
```

### 查看进度
```
用户说："查看改造进度"
→ 显示完成情况和剩余工作
```

## 改造完成检查清单

改造每个文件后确认：
- [ ] 不影响原有逻辑
- [ ] 100%新代码被调用
- [ ] 70%原方法调用新代码
- [ ] 无敏感功能实现
- [ ] 代码可正常编译
- [ ] 进度记录已更新
 
## 最佳实践

1. **优先级顺序**：小文件 → UI组件 → 工具类 → 控制器 → 敏感文件
2. **质量要求**：实用功能 > 代码数量
3. **安全原则**：合规性 > 改造效率
4. **维护性**：代码清晰 > 复杂技巧
 